// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model Workspace {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  displayName String

  // the name of this project set by editor
  name String @unique

  //* accessor name
  //* name used for accessing configuration of this project by template syntax.
  //* e.g. - GRIDA -> so it can be reference on other projects like so,
  //* "Hello ! {GRIDA.SOME_SHARED_KEY}, great to use shared variables.")
  accessorName String @unique

  logo String?

  avatar String?

  website String?

  // public twitter account username to be displayed on workspace page (for other visitors)
  twitter String?

  plan Plan

  // the preview (cover) image set by eidtor, if non set, showing the default screen's perview, or bridged's default asset
  // previewImage String

  billingEmail String?

  // last update of this project's asset / scene
  updatedAt DateTime @default(now()) @updatedAt

  // the registration date of this project
  createdAt DateTime @default(now())

  // the default locale of this project, set as en_US by default
  defaultLocale String @default("en_US")

  // the available, supported locales of this project's assets.
  locales String[]

  // region = relations
  activities ActivityLog[]

  members     MemberOnWorkspace[]
  guests      GuestOnWorkspace[]
  invitations Invitation[]
  domains     Domain[]
}

// nested model
type Plan {
  paid           Boolean @default(false)
  subscriptionId String?
}

model User {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  uid        String              @unique
  workspaces MemberOnWorkspace[] @relation("joined-workspaces")
  activities ActivityLog[]
}

model MemberOnWorkspace {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  workspace   Workspace         @relation(fields: [workspaceID], references: [id])
  workspaceID String
  user        User              @relation("joined-workspaces", fields: [userID], references: [id])
  userID      String
  level       MemberAccessLevel @default(member)
  // #region profile
  profile     MemberProfile
  // #endregion profile
}

type MemberProfile {
  // display name to use on (per) workspace
  name   String
  avatar String?
}

model GuestOnWorkspace {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workspace   Workspace @relation(fields: [workspaceID], references: [id])
  workspaceID String    @unique
  userID      String    @unique
  access      String[]
}

enum MemberAccessLevel {
  admin
  member
}

model ActivityLog {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userID], references: [id])
  userID      String
  workspace   Workspace @relation(fields: [workspaceID], references: [id])
  workspaceID String
  event       String
  data        Json?
  at          DateTime  @default(now())
  ip          String?
  ua          String?
}

model Invitation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  workspace   Workspace @relation(fields: [workspaceID], references: [id])
  workspaceID String

  email String @unique

  // the invitation code
  code String @unique

  // the invitation status
  status InvitationStatus @default(pending)

  // the invitation type
  type String @default("invitation")

  // the invitation created at
  createdAt DateTime @default(now())

  // the invitation updated at
  updatedAt DateTime @updatedAt
}

enum InvitationStatus {
  pending
  accepted
  rejected
  expired
}

model Domain {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  workspace   Workspace @relation(fields: [workspaceID], references: [id])
  workspaceID String

  name String @unique

  // the domain created at
  createdAt DateTime @default(now())
  createdBy String

  // the domain updated at
  updatedAt DateTime @updatedAt
  registrar String
}
